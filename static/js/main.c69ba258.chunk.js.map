{"version":3,"sources":["store/query.ts","store/selectedUser.ts","store/status.ts","store/todos.ts","store/user.ts","store/index.ts","api/api.ts","components/CurrentUser/CurrentUser.tsx","components/Todolist/TodoList.tsx","App.tsx","index.tsx"],"names":["CHANGE_QUERY","actions","payload","type","queryState","query","SET_USER","selectedUserState","selectedUser","SET_STATUS","statusState","status","GET_TODOS","REMOVE_TODO","todosState","todos","GET_USERS","usersState","users","rootReducer","combineReducers","state","action","filter","todo","id","store","createStore","composeWithDevTools","applyMiddleware","thunk","request","url","fetch","then","response","ok","Error","statusText","json","CurrentUser","useSelector","dispatch","useDispatch","setUser","user","actionsUser","className","name","email","phone","onClick","TodoList","visibleTodos","search","toLowerCase","title","includes","completed","value","placeholder","onChange","event","inputQuery","currentTarget","actionsQuery","selectedStatus","actionsStatus","map","classNames","htmlFor","checked","readOnly","actionsTodos","userId","find","App","useEffect","actionsUsers","sort","a","b","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c69ba258.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\n// action type\nconst CHANGE_QUERY = 'CHANGE_QUERY';\n\n// action creator\nexport const actions = {\n  changeQuery: (payload: string) => ({ type: CHANGE_QUERY, payload }),\n};\n\n// initial state\nexport type QueryState = {\n  query: string,\n};\n\nconst queryState: QueryState = {\n  query: '',\n};\n\n// reducer\nexport const queryReducer = (state = queryState, action: AnyAction) => {\n  switch (action.type) {\n    case CHANGE_QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\n\n// action type\nconst SET_USER = 'SET_USER';\n\n// action creator\nexport const actions = {\n  setUser: (payload: User | null) => ({ type: SET_USER, payload }),\n};\n\n// initial state\nexport type SelectedUserState = {\n  selectedUser: User | null,\n};\n\nconst selectedUserState: SelectedUserState = {\n  selectedUser: null,\n};\n\n// reducer\nexport const selectedUserReducer = (state = selectedUserState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USER:\n      return {\n        ...state,\n        selectedUser: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\n\n// action type\nconst SET_STATUS = 'SET_STATUS';\n\n// action creator\nexport const actions = {\n  setStatus: (payload: string) => ({ type: SET_STATUS, payload }),\n};\n\n// initial state\nexport type StatusState = {\n  status: string,\n};\n\nconst statusState: StatusState = {\n  status: 'All',\n};\n\n// reducer\nexport const statusReducer = (state = statusState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_STATUS:\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\n\n// action types\nconst GET_TODOS = 'GET_TODOS';\nconst REMOVE_TODO = 'REMOVE_TODO';\n\n// action creator\nexport const actions = {\n  getTodos: (payload: Todo[]) => ({ type: GET_TODOS, payload }),\n  removeTodo: (payload: Todo) => ({ type: REMOVE_TODO, payload }),\n};\n\n// initial state\nexport type TodosState = {\n  todos: Todo[],\n};\n\nconst todosState: TodosState = {\n  todos: [],\n};\n\n// reducer\nexport const todosReducer = (state = todosState, action: AnyAction) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n    case REMOVE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload.id),\n      };\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\n\n// action type\nconst GET_USERS = 'GET_USERS';\n\n// action creator\nexport const actions = {\n  getUsers: (payload: User[]) => ({ type: GET_USERS, payload }),\n};\n\n// initial state\nexport type UsersState = {\n  users: User[],\n};\n\nconst usersState: UsersState = {\n  users: [],\n};\n\n// reducer\nexport const usersReducer = (state = usersState, action: AnyAction) => {\n  switch (action.type) {\n    case GET_USERS:\n      return {\n        ...state,\n        users: [...state.users, ...action.payload],\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { queryReducer, QueryState } from './query';\nimport { selectedUserReducer, SelectedUserState } from './selectedUser';\nimport { statusReducer, StatusState } from './status';\nimport { todosReducer, TodosState } from './todos';\nimport { usersReducer, UsersState } from './user';\n\nexport type RootState = {\n  selectedUser: SelectedUserState;\n  todos: TodosState;\n  query: QueryState;\n  status: StatusState;\n  users: UsersState;\n};\n\n// rootReducer - this function is called after dispatching an action\n\nconst rootReducer = combineReducers({\n  selectedUser: selectedUserReducer,\n  todos: todosReducer,\n  query: queryReducer,\n  status: statusReducer,\n  users: usersReducer,\n});\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import { Action, Dispatch } from 'redux';\nimport { actions as actionsTodos } from '../store/todos';\nimport { actions as actionsUsers } from '../store/user';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUsers = () => {\n  return (dispatch: Dispatch<Action>) => {\n    request('/users')\n      .then(users => dispatch(actionsUsers.getUsers(users)));\n  };\n};\n\nexport const getTodos = () => {\n  return (dispatch: Dispatch<Action>) => {\n    request('/todos')\n      .then(response => response.sort((a: Todo, b: Todo) => a.userId - b.userId))\n      .then(todos => dispatch(actionsTodos.getTodos(todos)));\n  };\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store';\nimport { actions as actionsUser } from '../../store/selectedUser';\n\nimport './CurrentUser.scss';\n\nexport const CurrentUser = () => {\n  const selectedUser = useSelector((state: RootState) => state.selectedUser.selectedUser);\n  const dispatch = useDispatch();\n  const setUser = (user: User | null) => {\n    dispatch(actionsUser.setUser(user));\n  };\n\n  if (!selectedUser) {\n    return (\n      <div className=\"CurrentUser\">\n        <h3 className=\"CurrentUser__name\">User not found</h3>\n        <button\n          className=\"CurrentUser__button\"\n          type=\"button\"\n          onClick={() => setUser(null)}\n        >\n          Remove a choice\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        {`Selected user: ${selectedUser.id}`}\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">\n        {selectedUser.name}\n      </h3>\n      <p className=\"CurrentUser__email\">\n        {selectedUser.email}\n      </p>\n      <p className=\"CurrentUser__phone\">\n        {selectedUser.phone}\n      </p>\n      <button\n        className=\"CurrentUser__button\"\n        type=\"button\"\n        onClick={() => setUser(null)}\n      >\n        Remove a choice\n      </button>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store';\nimport { actions as actionsQuery } from '../../store/query';\nimport { actions as actionsUser } from '../../store/selectedUser';\nimport { actions as actionsStatus } from '../../store/status';\nimport { actions as actionsTodos } from '../../store/todos';\n\nimport './TodoList.scss';\n\nexport const TodoList = () => {\n  const query = useSelector((state: RootState) => state.query.query);\n  const status = useSelector((state: RootState) => state.status.status);\n  const todos = useSelector((state: RootState) => state.todos.todos);\n  const selectedUser = useSelector((state: RootState) => state.selectedUser.selectedUser);\n  const users = useSelector((state: RootState) => state.users.users);\n  const dispatch = useDispatch();\n  const setQuery = (inputQuery: string) => {\n    dispatch(actionsQuery.changeQuery(inputQuery));\n  };\n\n  const setUser = (user: User | null) => {\n    dispatch(actionsUser.setUser(user));\n  };\n\n  const setStatus = (selectedStatus: string) => {\n    dispatch(actionsStatus.setStatus(selectedStatus));\n  };\n\n  const removeTodo = (selectedTodo: Todo) => {\n    dispatch(actionsTodos.removeTodo(selectedTodo));\n  };\n\n  let visibleTodos: Todo[] = todos.filter((todo: Todo) => {\n    const search: string = query.toLowerCase();\n\n    return todo.title.toLowerCase().includes(search);\n  });\n\n  switch (status) {\n    case 'active':\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n      break;\n    case 'completed':\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        value={query}\n        placeholder=\"find todo\"\n        onChange={(event) => setQuery(event.currentTarget.value)}\n      />\n      <select\n        onChange={(event) => setStatus(event.currentTarget.value)}\n        value={status}\n        className=\"App-AddSelect\"\n      >\n        <option\n          value=\"all\"\n          className=\"App__AddOption\"\n        >\n          all\n        </option>\n        <option\n          value=\"active\"\n          className=\"App__AddOption\"\n        >\n          active\n        </option>\n        <option\n          value=\"completed\"\n          className=\"App__AddOption\"\n        >\n          completed\n        </option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        {visibleTodos.map(todo => (\n          <ul className=\"TodoList__list\">\n            <li\n              key={todo.id}\n              className={\n                classNames('TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  })\n              }\n            >\n              <label htmlFor=\"input\">\n                <input\n                  id=\"input\"\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div className=\"TodoList__buttons\">\n                <button\n                  className=\"TodoList__user-button button TodoList__user-button--selected\"\n                  type=\"button\"\n                  onClick={() => removeTodo(todo)}\n                >\n                  Remove this todo\n                </button>\n\n                <button\n                  className={\n                    classNames(\n                      'TodoList__user-button',\n                      'button',\n                      {\n                        'TodoList__user-button--selected': todo.userId !== selectedUser?.id,\n                      },\n                    )\n                  }\n                  type=\"button\"\n                  onClick={() => setUser(users.find(user => user.id === todo.userId) || null)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </div>\n            </li>\n          </ul>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getTodos, getUsers } from './api/api';\n\nimport './App.scss';\nimport { RootState } from './store';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoList } from './components/Todolist';\n\nconst App = () => {\n  const selectedUser = useSelector((state: RootState) => state.selectedUser.selectedUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getUsers());\n    dispatch(getTodos());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUser !== null ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nconst Root: React.FC = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}